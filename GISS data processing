##############################GISS##################################
###The goal here is to generate a PCA to reduce the dimensionality 
###of the GISS-LOTI data into a more reasonable number of variables to
###be used as predictors of lake level variability. The code also compares 
###the resulting PCs to a global set of climate telleconnection indeces from 
###NOAA

require(ncdf4)
require(plyr)
require(dplyr)
require(reshape2)
require(tidyr)
require(data.table)
require(lubridate)
require(zyp)
require(rkt)
require(pcaMethods)

#download the GISS data from the GISS website
download.file("https://data.giss.nasa.gov/pub/gistemp/GHCNv3/gistemp1200_ERSSTv5.nc.gz","U:/B.Kraemer/GlobalLakeLevels_IGB/gistemp1200_ERSSTv5.nc.gz")

#unzip the file
#FOR NOW DO THIS MANUALLY

#open the nc file
File.nc<-nc_open("gistemp1200_ERSSTv5.nc") #edit to suit your working directory
print(File.nc)

#get the data
lon<-ncvar_get(File.nc,"lon")
lat<-ncvar_get(File.nc,"lat")
time<-ncvar_get(File.nc,"time")
temp<-ncvar_get(File.nc,"tempanomaly")

#close the nc file
nc_close(File.nc)

#Create dataframe
indices <- expand.grid(lon,lat,time)
GISS <- data.frame(cbind(indices, as.vector(temp)))
rm(indices)
rm(temp)
names(GISS)<-c("lon","lat","time","temp")

#simplify the dataframe and transform date to as.Date
GISS<-na.omit(GISS)
GISS$date<-as.Date(GISS$time,origin="1800-01-01")

#subset the data to the time of satellite lake level observations
GISS<-GISS[which(GISS$time>36525),]

#write the dataframe to a file with original filename plus ".txt"
GISS$lonlat<-paste("lon",GISS$lon,"lat",GISS$lat,sep="")

#Prep the data for PCA
head(GISS)
GISS$temp<-round(GISS$temp,digits=2)
GISS$date<-as.Date(GISS$date)

GISS_wide<-as.data.frame(spread(GISS[,c(3,4,5,6)],key=lonlat,value=temp,fill="NA"))
summary(GISS_wide[,c(1:5)])
head(GISS_wide[c(1:5),c(1:5)])
summary(GISS_wide[c(1:100)])

for(i in c(1,3:ncol(GISS_wide))) {
  GISS_wide[,i] <- as.numeric(GISS_wide[,i])
}

#Run the PCA
GISS_wide$date<-as.Date(GISS_wide$date)
GISS_wide<-GISS_wide[date>"1992-01-01"]
PCA_326<-pca(GISS_wide[,c(3:16176)],method="nipals",nPcs=326,center=TRUE,scale="uv")                  
PCA_scores<-as.data.frame(PCA_326@scores)
PCA_scores<-cbind(GISS_wide[,c(1:2)],PCA_scores)
PCA_scores$year<-year(PCA_scores$date)
PCA_scores$month<-month(PCA_scores$date)

#filter and remove the trends from the PCs
PCA_scores<-fread("D:/GlobalLakeLevels/PCA_scores_v1.csv")
PCA_scores$date<-as_date(PCA_scores$date)
PCA_scores$decyear<-decimal_date(PCA_scores$date)
PCA_scores.l<-melt(PCA_scores[,c(3:328,331)],id="decyear")
PCnames<-unique(PCA_scores.l$variable)

for(PC in PCnames){
  tryCatch({
  PC_data<-PCA_scores.l[variable==PC]
  PC_data<-PC_data[order(decyear)]
  PC_data$value<-rollmean(PC_data$value,3,na.pad=TRUE,align="right")
  PC_data<-na.omit(PC_data)
  PC_data$fit<-ts(rowSums(tsSmooth(StructTS(PC_data[,value]))))
  PC_data$fit_detrend<-zyp.sen(data=PC_data,fit~decyear)$residuals
  PC_data$fit_detrend.z<-(PC_data$fit_detrend-median(PC_data$fit_detrend))/mad(PC_data$fit_detrend,constant=1)
  
  # Merge the data into a single file
  # if the merged dataset doesn't exist, create it
  if (!exists("PCA_scores_kalman")){PCA_scores_kalman <- PC_data}
  # if the merged dataset does exist, append to it
  if (exists("PCA_scores_kalman")){PCA_scores_kalman<-rbindlist(list(PCA_scores_kalman,PC_data))}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
  }

PCA_scores_kalman<-as.data.table(unique(PCA_scores_kalman))

#go back to wide format
PCA_scores_detrend.w<-cast(PCA_scores_kalman[,c(1,2,6)],decyear~variable)

#extract the correlations among PCs
PC_cor<-cor(PCA_scores_detrend.w,method="kendall")

#extract the geospatial correlations with each PC
PCA_completeObs<-PCA_326@completeObs
decyear<-PCA_scores_detrend.w$decyear
PCA_completeObs<-PCA_completeObs[c(3:326)]
PCA_completeObs<-cbind(decyear,PCA_completeObs)
PCA_completeObs_l<-melt(PCA_completeObs,id.vars="decyear",measure.vars=names(PCA_completeObs)[2:16175])
names(PCA_completeObs_l)<-c("decyear","lonlat","temp")
PCA_scores_detrend<-as.data.table(PCA_scores_detrend.w)

for(i in 2:101){
PC_i<-(PCA_scores_detrend[,..i])
names(PC_i)<-"PC"
PCA_completeObs_l$PC<-rep(PC_i$PC,times=16174)
PCA_completeObs_l<-as.data.table(PCA_completeObs_l)
PCA_cor_i<-PCA_completeObs_l[,.(PCcor=cor(x=temp,y=PC,method="kendall"),
                                PCcor_p=cor.test(x=temp,y=PC,method="kendall")$p.value),
                             by=.(lonlat)]  
PCA_cor_i$PC<-paste0("PC",i-1) 

print(i)
print(Sys.time())
#print the cors
# if the interpolated dataset doesnt exhist then create it
if (!exists("PCA_cor")){PCA_cor <- PCA_cor_i}
# if the merged dataset does exist, append to it
if (exists("PCA_cor")){PCA_cor<-rbindlist(list(PCA_cor,PCA_cor_i))}
}

head(PCA_cor)
names(PCA_cor)[1]<-"latlon"
row.names(PCA_cor) <- seq(nrow(PCA_cor))

PCA_cor$lon<-str_split_fixed(PCA_cor$latlon,"lat",2)[,1]
PCA_cor$lat<-str_split_fixed(PCA_cor$latlon,"lat",2)[,2]
PCA_cor$lon<-gsub("lon","",PCA_cor$lon)
PCA_cor$lon<-as.numeric(PCA_cor$lon)
PCA_cor$lat<-as.numeric(PCA_cor$lat)
PCA_cor$PC<-as.factor(PCA_cor$PC)

#Correlation between PCs and the teleconnection indeces
urlfile<-'https://github.com/bkraemer/GlobalLakeLevels/blob/master/DATA_Indeces_v3.csv'
index<-fread(urlfile,header=TRUE) 
index<-index[,c(1:14)]
index_l<-index %>%
  gather(month,IndexValue,3:14)
names(index_l)<-c("index","year","month","value")
head(index_l)

PCA<-fread("D:/GlobalLakeLevels/PCA_scores_detrend_v1.csv",header=TRUE)
PCA<-PCA[,c(1:101)]

PCA_l<-PCA %>%
  gather(PC,PCvalue,2:101)

#Calculate correlation coefss with the PCs and telleconnection index values
head(index_l)
head(PCA_l)
PCA_l$date<-date_decimal(PCA_l$decyear)
PCA_l$year<-year(PCA_l$date)
PCA_l$month<-month(PCA_l$date,label=TRUE,abbr=TRUE)

PCAindex<-merge(index_l,PCA_l,by=c("year","month"),all=TRUE)
summary(PCAindex)
PCAindex<-PCAindex[c(1,2,3,4,6,7,8)]
PCAindex$month<-as.factor(PCAindex$month)
PCAindex$PC<-as.factor(PCAindex$PC)

completeFun <- function(data, desiredCols) {
  completeVec <- complete.cases(data[, desiredCols])
  return(data[completeVec, ])
}

PCAindex<-completeFun(PCAindex,"value")
PCAindex<-completeFun(PCAindex,"PCvalue")

PCAindex_cor<-ddply(PCAindex,.(index,PC),
                    summarise,
                    cor=Kendall(value,PCvalue)$tau,
                    corP=Kendall(value,PCvalue)$sl)
